name: Deploy

# Manual deployment with environment selection
on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy (staging|production)'
        required: true
        default: 'staging'

jobs:
  deploy:
    runs-on: ubuntu-latest
    # Uses GitHub environment protection rules
    environment: ${{ inputs.environment }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Setup SSH key for server access
      # Requires: SSH_PRIVATE_KEY secret (full private key content)
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: |
            ${{ secrets.SSH_PRIVATE_KEY }}

      # Add server to known_hosts to avoid host verification prompts
      # Requires: SSH_HOST secret (server hostname/IP)
      - name: Add known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      # Deploy application files and run server-side commands
      # Requires: SSH_USER, SSH_HOST, REMOTE_DIR secrets
      - name: Deploy over SSH
        env:
          SSH_USER: ${{ secrets.SSH_USER }}      # SSH username (e.g., 'deploy')
          SSH_HOST: ${{ secrets.SSH_HOST }}      # Server hostname/IP
          REMOTE_DIR: ${{ secrets.REMOTE_DIR }}  # Target directory (e.g., '/var/www/watchly')
        run: |
          # Sync files to server (exclude dev dependencies and logs)
          rsync -az --delete \
            --exclude ".git" \
            --exclude "node_modules" \
            --exclude "vendor" \
            --exclude "storage/logs/*" \
            ./ ${SSH_USER}@${SSH_HOST}:${REMOTE_DIR}

          # Execute commands on remote server
          ssh ${SSH_USER}@${SSH_HOST} << 'EOF'
            set -e
            cd ${REMOTE_DIR}
            
            # Verify PHP version
            php -v
            
            # Install production dependencies (no dev packages)
            composer install --no-interaction --prefer-dist --no-dev --optimize-autoloader
            
            # Cache configuration for better performance
            php artisan config:cache
            
            # Cache routes (skip if fails - some routes might not be cacheable)
            php artisan route:cache || true
            
            # Cache views (skip if fails)
            php artisan view:cache || true
            
            # Run database migrations
            php artisan migrate --force
            
            # Install and build frontend assets (skip if npm not available)
            npm ci --omit=dev || true
            npm run build || true
          EOF


